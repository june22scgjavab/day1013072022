package revise;

public class Question1{
   public static void main(String[] args){
     int roll;
	 String name;
	 System.out.println(roll);
	 System.out.println(name);
	 }
  }
[ Compilation error as local variable needs to be initialised as they dont get the default value ]
-----------------------------------------------------------------------------------------------------------------------------------------
package revise;

public class Student{
  private int roll;
  private String name;
  public void displayStudent(){
  System.out.println(roll);
  System.out.println(name);
  }
 }
 
 package revise;
 
 public class StudentMain{
  public static void main(String args[]){
   Student student=new Student();
   student.displayStudent();
  }
  }
 [ We will 0 for roll and null for name ]
 -------------------------------------------------------------------------------------------------------------------------------------------
 
 package revise1;
 
 public class Student{
 private int roll;            
 private String name;
                      
 public Student(){
 int roll=1;    // local variable within the constructor and now the local variables are initialised
 String name="Akash"; // the instance value variable will get default value as 0 and null
 }
 
 public void displayStudent(){
 System.out.println(roll);
 System.out.println(name);
 }
}

package revise1;

public class StudentMain{
 public static void main(String args[]) {
    Student student=new Student();
	student.displayStudent();
 }
}
[ So here roll and name are declared as local variables in the constructor which are getting initialised
in the constructor so the instance variables roll and name are getting the default value as 0 for roll
and null for name. ]
------------------------------------------------------------------------------------------------------------------------------------------
package revise2b;
 
 public class Student{
 private int roll;
 private String name;
 
 public Student(int roll, String name){
  roll=this.roll;
  name=this.name;
 }
 
 public void displayStudent(){
 System.out.println(roll);
 System.out.println(name);
 }
}

package revise2b;

public class StudentMain{
 public static void main(String args[]) {
    Student student=new Student(1,"Ram");
	student.displayStudent();
 }
}


[ default values  0 and null]

-----------------------------------------------------------------------------------


package revise2;
 
 public class Student{
 private int roll;
 private String name;
 
 public Student(int roll, String name){
 int roll=this.roll;
 String name=this.name;
 }
 
 public void displayStudent(){
 System.out.println(roll);
 System.out.println(name);
 }
}

package revise2;

public class StudentMain{
 public static void main(String args[]) {
    Student student=new Student(1,"Ram");
	student.displayStudent();
 }
}
[ Compilation error , because the parameters are also local variables and within the constructor
 again we declared local variable with the same name. So within a single scope we cannot have
 multiple variables with the same name]
--------------------------------------------------------------------------------------------------------------------------------------------------
package revise3;

public class Employee{
private int empId;
private String name;

public void Employee(){    // This will be treated as a method and not as a constructor
empId=1;
name="Jerry";
}

public void displayEmployee(){
System.out.println(empId);
System.out.println(name);
}

}

package revise3;

public class EmployeeMain{
public static void main(String args[]){
 Employee employee=new Employee();
 employee.displayEmployee();
 //employee.Employee();
}
}

[  empId and name will get the default value of 0 and null ]
-----------------------------------------------------------------------------------
package revise4;

public class Employee{
private int empId;
private String name;

public void Employee(int empId, String name){
this.empId=empId;
this.name=name;
}

public void displayEmployee(){
System.out.println(empId);
System.out.println(name);
}

}

package revise4;

public class EmployeeMain{
public static void main(String args[]){
 Employee employee1=new Employee();
 employee1.displayEmployee();
 Employee employee2=new Employee(1,"Suresh");
 employee2.displayEmployee();
}
}
[Compilation error ]


package revise4b;

public class Employee{
private int empId;
private String name;

public Employee(int empId, String name){
this.empId=empId;
this.name=name;
}

public void displayEmployee(){
System.out.println(empId);
System.out.println(name);
}

}

package revise4b;

public class EmployeeMain{
public static void main(String args[]){
 Employee employee1=new Employee();
 employee1.displayEmployee();
 Employee employee2=new Employee(1,"Suresh");
 employee2.displayEmployee();
}
}

[ Compilation error because we dont have any default constructor . Even it is not being created during the compilation as already we have 
provided the parameterized constructor. So to execute the above code we have to create a default/parameterless constructor]

-------------------------------------------------------------------------------------------------------------------------------------------------
package revise5;

public class Employee{
private int empId;
private String name;

public Employee(){
empId=2;
name="Jenny";
}

public  Employee(int empId, String name){
this.empId=empId;
this.name=name;
}

public void displayEmployee(){
System.out.println(empId);
System.out.println(name);
}

}

package revise5;

public class EmployeeMain{
public static void main(String args[]){
 Employee employee1=new Employee();
 employee1.displayEmployee();
 Employee employee2=new Employee(1,"Suresh");
 employee2.displayEmployee();
}
}
[ The output will be shown as 2 Jenny and 1 Suresh ]
----------------------------------------------------------------------------------------------------------------------------------------------------

package revise6;

public class Parent{
private int i;

public Parent(int i){
this.i=i;
}

public void displayParent(){
System.out.println(this.i);
}

}


package revise6;
public class Child extends Parent {
private int j;

public Child(){
j=20;
}

public void displayChild(){
System.out.println(j);
}
}

package revise6;

public class Main{
 public static void main(String args[]){
 Child child=new Child();
 child.displayChild();
}

}
[ Compilation error. The default constructor of Child class will call the default constructor of Parent class but in Parent class we have the
parameterized constructor defined ]

----------------------------------------------------------------------------------------------------------------------------------------------------

package revise7;

public class Parent{
private int i;

public Parent(int i){
this.i=i;
}

public void displayParent(){
System.out.println(this.i);
}

}


package revise7;
public class Child extends Parent {
private int j;

public Child(){
super(200);
j=20;
}

public void displayChild(){
System.out.println(j);
}
}

package revise7;

public class Main{
 public static void main(String args[]){
 Child child=new Child();
 child.displayChild();
}

}
[ The code will compile and will show the output as 20 ]
-------------------------------------------------------------------------------------------------------------------------------

package revise8;

public class Parent{
private int i;

public Parent(){
this.i=30;
}

public Parent(int i){
this.i=i;
}

public void displayParent(){
System.out.println(this.i);
}

}


package revise8;
public class Child extends Parent {
private int j;

public Child(){
j=20;
}

public void displayChild(){
System.out.println(j);
}
}

package revise8;

public class Main{
 public static void main(String args[]){
 Child child=new Child();
 child.displayChild();
 child.displayParent();
}

}

The code will compile will shoe the output as 20 and 30
-----------------------------------------------------------------------------------------

package revise9;

public class Parent{
private int i;

public Parent(){
this.i=30;
}

public Parent(int i){
this.i=i;
}

public void displayParent(){
System.out.println(this.i);
}

}


package revise9;
public class Child extends Parent {
private int j;

public Child(int j){
super(j);
}

public void displayChild(){
System.out.println(j);
}
}

package revise9;

public class Main{
 public static void main(String args[]){
 Child child=new Child(100);
 child.displayChild();
 child.displayParent();
}

}
[ The code will compile and output will be as 0 and 100.]
---------------------------------------------------------------------------------

package revise10;

public class Demo {
private int i;

private Demo(){
i=100;
System.out.println("I am the constructor with private access specifier"+i);
}

public static void main(String args[]){
  Demo demo=new Demo();
 }
}
[ The code will compile. We can have a constructor as private . The output of I am the constructor with private access specifier100 will be shown.
-------------------------------------------------------------------------------------
package revise11;

public class Demo {
private int i;

private Demo(){
i=100;
System.out.println("I am the constructor with private access specifier"+i);
}
}

package revise11;

public class DemoMain{
public static void main(String args[]){
  Demo demo=new Demo();
 }
}

[ Compilation error as Demo class and DemoMain are two separate classes. So from DemoMain we cannot access the private constructor of Demo class. ]
--------------------------------------------------------------------------------------

package revise12;

public class Parent{
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise12;

public class Child extends Parent {

private void display() {
 System.out.println("I am the child display method");
}

}

package revise12;

public class Main{
public static void main(String args[]) {
   Child child=new Child();
   child.display();
  }
 }
[ Compilation error. The display method in the child class cannot have access modifier which is more restrictive in comparison to the method in the
parent class]

private=====>default/package specfic==========>protected==========>public 
 ----------------------------------------------------------------------------
 
 package revise13;

public class Parent{
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise13;

public class Child extends Parent {

protected void display(int i) {
 System.out.println("I am the child display method"+i);
}

}

package revise13;

public class Main{
public static void main(String args[]) {
   Child child=new Child();
   child.display();
   child.display(1);
  }
 }
 [ Code will compile. It will display I am the parent display method and I am the child display method1
----------------------------------------------------------------------------------
 
 package revise14;

public class Parent{
 
 public int display(){
 System.out.println("I am the parent display method");
 }

} 

package revise14;

public class Child extends Parent {

public void display() {
 System.out.println("I am the child display method"+i);
}

}

package revise14;

public class Main{
public static void main(String args[]) {
   Child child=new Child();
   child.display();
  
  }
 }
 
[ Compilation error as in the code it is not method overriding as the return types are different and also not method overloading as only return type is different ]
 ----------------------------------------------------------------------------------------
 
 
 package revise15;

public class Parent{
 
 public int display(){
 System.out.println("I am the parent display method1");
 }
 
 public void display(){
 System.out.println("I am the parent display method2");
 }

} 

package revise15;

public class Child extends Parent {



}

package revise15;

public class Main{
public static void main(String args[]) {
   Child child=new Child();
   child.display();
  
  }
 }

[ Compilation error as we have two display method which are differing in return type only so it cannot method overloading and it is also
not method overriding as for method overriding we need to have two have minimum two classes which are having parent child relationship. ]
 ----------------------------------------------------------------------------------------
 
 package revise16;

public class Parent{
 
 
 
 public void display(){
 System.out.println("I am the parent display method2");
 }

} 

package revise16;

public class Child extends Parent {

public int displayChild(){
 System.out.println("I am the parent display method1");
 }

}

package revise16;

public class Main{
public static void main(String args[]) {
  Parent parent=new Child();
   parent.displayChild();
  
  }
 }
[ The code will show compilation error as we dont have displayChild in the Parent class and the reference variable is of Parent type. ]
 --------------------------------------------------------------------------------
 
 package revise17;

public class Parent{
 
 
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise17;

public class Child extends Parent {

public int displayChild(){
 System.out.println("I am the child display method");
 }
 
 

}

package revise17;

public class Main{
public static void main(String args[]) {
  Parent parent=new Child();
   parent.display();
  
  }
 }
 [ The code will compile and show the the output as I am the parent display method.
 --------------------------------------------------------------------------------
 
 
 package revise18;

public class Parent{
 
 
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise18;

public class Child extends Parent {

public void display(){
 System.out.println("I am the child display method");
 }
 
 

}

package revise18;

public class Main{
public static void main(String args[]) {
  Parent parent=new Child();
   parent.display();
  
  }
 }

The code will compile and show the output as I am the child display method.
 -------------------------------------------------------------------------------------
 
 package revise19;

public class Parent{
 
 
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise19;

public class Child extends Parent {

public void display(){
super.display();
 System.out.println("I am the child display method");
 }
 
 

}

package revise19;

public class Main{
public static void main(String args[]) {
  Parent parent=new Child();
   parent.display();
  
  }
 }

[ The code will compile. super keyword is used to represent the immediate parent class. So here super.display() will invoke the display method of
the parent class. So the output will be I am the parent display method I am the child display method
 ----------------------------------------------------------------
 
 --------------------------------------------------------------------------------------
 
 package revise20;

public class Parent{
 
 protected int i=10;
 
 public void display(){
 System.out.println("I am the parent display method");
 }

} 

package revise20;

public class Child extends Parent {

private int i=20;
 public void display(){
 System.out.println(super.i);
 System.out.prinltn(i);
 System.out.println("I am the child display method");
 }
 
 

}

package revise19;

public class Main{
public static void main(String args[]) {
  Parent parent=new Child();
   parent.display();
  
  }
 }

[ super can be used to access the instance variable of the parent when we have a variable with the same name in the child class. 
So the output is 10 20 I am the child display method. ]
 
 -----------------------------------------------------------------------------------------------------------------------------------------------
  